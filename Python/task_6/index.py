# Циклы в Python

# Циклы позволяют выполнять повторяющиеся действия над данными. В Python они представлены двумя основными конструкциями: for и while. В этом материале рассматривается цикл for, который используется для последовательного перебора элементов.

# 1. Цикл for
# Цикл for выполняет итерации по элементам последовательностей (списки, строки, диапазоны, множества и т. д.).

# Синтаксис:

# for переменная in последовательность:
#     # Действия, выполняемые в каждой итерации
# Пример 1: Перебор списка

# for элемент in [1, 2, 3, 4]:
#     print(элемент)  # Вывод каждого элемента списка
# 2. Функция range()
# range() создаёт последовательности чисел. Она часто используется в циклах для генерации индексов или работы с числами.

# Синтаксис функции range:
# range(конец) — создаёт диапазон от 0 до конец-1.
# range(начало, конец) — создаёт диапазон от начало до конец-1.
# range(начало, конец, шаг) — создаёт диапазон с указанным шагом.
# Примеры:

# # Диапазон от 0 до 4
# for i in range(5):
#     print(i)  # 0, 1, 2, 3, 4

# # Диапазон от 1 до 9 с шагом 2
# for i in range(1, 10, 2):
#     print(i)  # 1, 3, 5, 7, 9
# 3. Обратный цикл
# Для создания убывающей последовательности в цикле используют range() с отрицательным шагом.

# Пример: Обратный порядок

# for i in range(10, 0, -1):
#     print(i)  # 10, 9, 8, ..., 1
# 4. Настройка функции print()
# Функция print() по умолчанию добавляет перевод строки после вывода. Параметр end позволяет изменить это поведение.

# Пример: Вывод в одну строку

# for i in range(5):
#     print(i, end=' ')  # Вывод: 0 1 2 3 4
# 5. Примеры задач с циклом for
# Пример 1: Вывести числа от 1 до 10

# for i in range(1, 11):
#     print(i)
# Пример 2: Вывести числа от 10 до 1 в обратном порядке

# for i in range(10, 0, -1):
#     print(i)
# Пример 3: Вывести квадраты чисел от 1 до 5

# for i in range(1, 6):
#     print(f"Квадрат числа {i}: {i**2}")
# Пример 4: Перебор символов строки

# for символ in "Python":
#     print(символ)  # P, y, t, h, o, n
# 6. Практические рекомендации
# Используйте range() для работы с числами.
# Контролируйте отступы — соблюдение правильной структуры кода обязательно.
# Экспериментируйте с параметром end в print() для настройки вывода.
# Работайте с итерируемыми объектами (списки, строки и др.), чтобы максимально использовать возможности Python.
# Циклы — это мощный инструмент для автоматизации действий в Python. Правильное понимание их синтаксиса и особенностей работы с последовательностями поможет эффективно решать задачи в программировании.