# Циклы в Python

# Циклы позволяют выполнять повторяющиеся действия и обработку данных в итерируемых объектах (списки, строки, словари и т.д.). Python предлагает мощные инструменты для работы с циклами, такие как for и while.

# 1. Цикл for
# икл for используется для итерации по последовательностям (списки, строки, диапазоны и т.д.).

# Пример: Итерация по списку

# Перебор элементов списка
# numbers = [1, 2, 3, 4, 5]
# for num in numbers:
#     print(num)  # Вывод каждого элемента
# 2. Функция range()
# Функция range() создаёт последовательности чисел, которые можно использовать в цикле.

# Синтаксис функции range:
# range(конец) — последовательность от 0 до конец-1.
# range(начало, конец) — последовательность от начало до конец-1.
# range(начало, конец, шаг) — последовательность от начало до конец-1 с шагом шаг.
# Примеры:

# # Диапазон от 0 до 4
# for i in range(5):
#     print(i)  # 0, 1, 2, 3, 4

# # Диапазон с началом и шагом
# for i in range(1, 10, 2):
#     print(i)  # 1, 3, 5, 7, 9
# 3. Обратный цикл
# Для создания убывающей последовательности используется range() с отрицательным шагом.

# Пример: Обратный порядок

# for i in range(10, 0, -1):
#     print(i)  # 10, 9, 8, ..., 1
# 4. Настройка функции print()
# Функция print() по умолчанию добавляет перевод строки после каждого вывода. Для изменения поведения используйте параметр end.

# Пример:

# for i in range(5):
#     print(i, end=' ')  # Числа выводятся в одну строку: 0 1 2 3 4
# Примеры задач с циклами
# Задача 1: Вывести числа от 1 до 10

# for i in range(1, 11):
#     print(i)
# Задача 2: Вывести числа от 10 до 1 в обратном порядке


# for i in range(10, 0, -1):
#     print(i)
# Задача 3: Вывести квадрат каждого числа в диапазоне от 1 до 5


# for i in range(1, 6):
#     print(f"Квадрат числа {i}: {i**2}")
# 5. Практические рекомендации
# Используйте range() — Это простой способ создания последовательности чисел.
# Контролируйте отступы — Python чувствителен к отступам, поэтому команды внутри цикла должны иметь одинаковый отступ.
# Настройте вывод — Используйте end для вывода в одну строку или настройте разделители.
# Совет: Используйте for для итерируемых объектов, таких как строки или списки:

# string = "Python"
# for char in string:
#     print(char)  # Вывод каждого символа строки
# Циклы — основа большинства задач в программировании. Они позволяют повторять действия, автоматизируя процесс обработки данных и упрощая код.