# Тема 14. Функции и рекурсия
# Задачи:
# Функции
# Локальные и глобальные переменные
# Рекурсия
# 1. Функции
# Функции — это независимые блоки кода, которые выполняют определенные задачи, могут принимать параметры и возвращать результаты. Все функции, такие как sqrt(), len(), print(), относятся к этому типу.

# Пример:

# Функция sqrt(): принимает один параметр (число) и возвращает его квадратный корень.
# Функция print(): принимает переменное количество параметров и ничего не возвращает.
# Пример 1: Открытие и сохранение файла с использованием Tkinter

# python
# Копировать код
# from tkinter import *
# from tkinter import filedialog as fd

# def insert_text():
#     file_name = fd.askopenfilename()  # Открытие диалога для выбора файла
#     with open(file_name) as f:
#         s = f.read()  # Чтение содержимого файла
#     text.insert(1.0, s)  # Вставка содержимого в текстовое поле

# def extract_text():
#     file_name = fd.asksaveasfilename(
#         filetypes=(("TXT files", "*.txt"),
#                    ("HTML files", "*.html;*.htm"),
#                    ("All files", "*.*"))
#     )  # Открытие диалога для сохранения файла
#     with open(file_name, 'w') as f:
#         s = text.get(1.0, END)  # Получение содержимого текстового поля
#         f.write(s)  # Запись содержимого в файл

# root = Tk()
# text = Text(width=50, height=25)
# text.grid(columnspan=2)

# b1 = Button(text="Открыть", command=insert_text)  # Кнопка для открытия файла
# b1.grid(row=1, column=0, sticky=E)

# b2 = Button(text="Сохранить", command=extract_text)  # Кнопка для сохранения файла
# b2.grid(row=1, column=1, sticky=W)

# root.mainloop()
# Объяснение:
# Определение функций:

# Функция insert_text() открывает диалог для выбора файла и вставляет его содержимое в текстовое поле.
# Функция extract_text() открывает диалог для сохранения файла и записывает содержимое текстового поля в файл.
# Локальные и глобальные переменные:

# Локальные переменные — переменные, определенные внутри функции и доступные только в ней.
# Глобальные переменные — переменные, доступные в любом месте программы.
# Пример:
# python
# Копировать код
# x = 10  # Глобальная переменная

# def my_function():
#     y = 5  # Локальная переменная
#     print(x)  # Доступ к глобальной переменной
#     print(y)  # Доступ к локальной переменной

# my_function()
# 2. Рекурсия
# Рекурсия — это когда функция вызывает саму себя. Это мощный инструмент для решения задач, таких как вычисление факториала или чисел Фибоначчи, но важно установить условие выхода из рекурсии, чтобы избежать бесконечных циклов.

# Пример 1: Рекурсивное вычисление факториала

# python
# Копировать код
# def factorial(n):
#     if n == 0:  # Условие выхода
#         return 1
#     else:
#         return n * factorial(n - 1)  # Рекурсивный вызов

# print(factorial(5))  # Вывод: 120
# Здесь функция factorial вызывает саму себя до тех пор, пока n не станет равным 0 — это условие выхода из рекурсии.

# Пример 2: Рекурсивное вычисление чисел Фибоначчи

# python
# Копировать код
# def fibonacci(n):
#     if n <= 0:
#         return 0
#     elif n == 1:
#         return 1
#     else:
#         return fibonacci(n-1) + fibonacci(n-2)  # Рекурсивный вызов

# print(fibonacci(7))  # Вывод: 13
# Здесь функция fibonacci вызывает себя для двух предыдущих чисел, пока не достигнет базового случая.

# Методические указания по выполнению задач:
# Определение функций:

# Напишите функцию, которая принимает два параметра (например, два числа) и возвращает их сумму.
# Напишите функцию, которая принимает список чисел и возвращает их среднее значение.
# Работа с локальными и глобальными переменными:

# Определите глобальную переменную и создайте функцию, которая изменяет её. Пример:
# python
# Копировать код
# x = 5

# def modify_global():
#     global x
#     x += 10

# modify_global()
# print(x)  # Вывод: 15
# Рекурсия:

# Напишите рекурсивную функцию, которая вычисляет сумму чисел от 1 до N.
# python
# Копировать код
# def sum_numbers(n):
#     if n == 1:
#         return 1
#     else:
#         return n + sum_numbers(n - 1)

# print(sum_numbers(5))  # Вывод: 15
# Пример работы с Tkinter:
