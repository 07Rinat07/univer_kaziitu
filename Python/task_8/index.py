# Работа со строками в Python
# Работа со строками является одной из ключевых тем в Python. Строки — это последовательности символов, которые позволяют хранить текстовую информацию. Для работы с ними Python предоставляет множество функций и методов. Рассмотрим основные из них.

# 1. Функции строк
# 1.1. Чтение строки
# Строку можно считать с клавиатуры с помощью функции input().


# s = input("Введите строку: ")
# print(f"Вы ввели: {s}")
# 1.2. Конкатенация строк
# Склеивание строк выполняется с использованием оператора +.


# s1 = "Привет"
# s2 = "Мир"
# s3 = s1 + " " + s2
# print(s3)  # "Привет Мир"
# 1.3. Повторение строки
# Строку можно повторить несколько раз с помощью оператора *.

# python
# Копировать код
# s = "Python "
# print(s * 3)  # "Python Python Python "
# 1.4. Длина строки
# Функция len() возвращает количество символов в строке.


# s = "Python"
# print(len(s))  # 6
# 1.5. Преобразование чисел в строку
# Функция str() преобразует любое значение в строку.


# num = 123
# str_num = str(num)
# print(str_num)  # '123'
# 2. Методы строк
# 2.1. Метод find()
# Находит первый индекс подстроки (или символа) в строке при поиске слева направо. Возвращает -1, если подстрока не найдена.


# s = "Программирование на Python"
# index = s.find("Python")
# print(index)  # 19
# 2.2. Метод rfind()
# Ищет подстроку справа налево. Возвращает индекс первого найденного элемента (с конца строки) или -1, если подстрока не найдена.


# s = "Программирование на Python"
# index = s.rfind("а")
# print(index)  # 25
# 2.3. Метод replace()
# Заменяет подстроку на другую.
# Синтаксис: строка.replace(что, на_что).


# s = "Привет, мир!"
# new_s = s.replace("мир", "Python")
# print(new_s)  # "Привет, Python!"
# 2.4. Метод count()
# Считает, сколько раз подстрока или символ встречается в строке.

# s = "программа"
# count_a = s.count("а")
# print(count_a)  # 3
# Примеры задач
# Пример 1: Подсчёт длины строки
# Вводим строку с клавиатуры и выводим её длину:


# s = input("Введите строку: ")
# print("Длина строки:", len(s))
# Пример 2: Замена подстроки
# Заменяем слово в строке на другое:


# s = "Программирование на Python"
# new_s = s.replace("Python", "Java")
# print(new_s)  # "Программирование на Java"
# Пример 3: Подсчёт вхождений символа
# Считаем, сколько раз буква "о" встречается в строке:


# s = "программирование"
# count = s.count("о")
# print("Количество 'о':", count)  # 2
# Пример 4: Поиск подстроки
# Находим индекс первого вхождения подстроки:


# s = "Программирование на Python"
# index = s.find("Python")
# print("Индекс подстроки:", index)  # 19
# Пример 5: Поиск последнего вхождения символа
# Ищем последний индекс символа:

# s = "Программирование на Python"
# index = s.rfind("а")
# print("Последний индекс символа 'а':", index)  # 25
# Практические рекомендации
# Используйте методы строк: Для работы с текстом проще использовать встроенные методы, такие как find, replace, count и другие.
# Учитывайте регистр: Большинство методов учитывают регистр символов, например, find("A") и find("a") вернут разные результаты.
# Проверяйте ввод: Если данные вводятся пользователем, можно использовать strip(), чтобы удалить лишние пробелы.
# Обрабатывайте ошибки: Убедитесь, что искомая подстрока существует, чтобы избежать некорректных результатов.
# Работа со строками — это одна из самых востребованных задач в программировании. Знание методов и функций Python позволит вам эффективно работать с текстовой информацией.