# Тема 14-15: Двумерные массивы
# Задачи:
# Обработка и создание вложенных списков
# Ввод двумерного массива
# Примеры обработки двумерного массива
# Генераторы двумерных массивов
# 1. Обработка и создание вложенных списков
# В Python двумерные массивы реализуются с использованием вложенных списков. Например, чтобы создать двумерный массив размером 3x3, можно использовать следующую конструкцию:

# python
# Копировать код
# matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# Каждая строка представляет собой отдельный список, а все строки вместе образуют двумерный массив. Вложенные списки можно обработать с помощью циклов.

# Пример: Создание и вывод двумерного массива:
# python
# Копировать код
# matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# # Вывод элементов массива
# for row in matrix:
#     print(row)
# Результат:

# csharp
# Копировать код
# [1, 2, 3]
# [4, 5, 6]
# [7, 8, 9]
# 2. Ввод двумерного массива
# Программа должна принимать двумерный массив, например, от пользователя. Для этого можно использовать цикл для ввода данных построчно.

# Пример: Ввод двумерного массива от пользователя:
# python
# Копировать код
# n = int(input("Введите количество строк: "))
# m = int(input("Введите количество столбцов: "))

# matrix = []
# for i in range(n):
#     row = list(map(int, input(f"Введите {m} чисел для строки {i+1}: ").split()))
#     matrix.append(row)

# # Вывод массива
# print("Введенный двумерный массив:")
# for row in matrix:
#     print(row)
# Пример ввода:

# yaml
# Копировать код
# Введите количество строк: 3
# Введите количество столбцов: 3
# Введите 3 числа для строки 1: 1 2 3
# Введите 3 числа для строки 2: 4 5 6
# Введите 3 числа для строки 3: 7 8 9
# Результат:

# csharp
# Копировать код
# Введенный двумерный массив:
# [1, 2, 3]
# [4, 5, 6]
# [7, 8, 9]
# 3. Примеры обработки двумерного массива
# Пример 1: Присвоение элементам на главной диагонали значения 1, выше главной диагонали — 0, ниже — 2
# Задача: Присвоить значения элементам двумерного массива на главной диагонали, выше диагонали — 0, ниже — 2.

# python
# Копировать код
# n = int(input("Введите размерность массива (n x n): "))

# # Инициализация двумерного массива с нулями
# matrix = [[0 for _ in range(n)] for _ in range(n)]

# # Заполнение массива по заданному условию
# for i in range(n):
#     for j in range(n):
#         if i == j:
#             matrix[i][j] = 1  # Главная диагональ
#         elif i < j:
#             matrix[i][j] = 0  # Элементы выше диагонали
#         else:
#             matrix[i][j] = 2  # Элементы ниже диагонали

# # Вывод результата
# for row in matrix:
#     print(row)
# Пример ввода:

# scss
# Копировать код
# Введите размерность массива (n x n): 4
# Результат:

# csharp
# Копировать код
# [1, 0, 0, 0]
# [2, 1, 0, 0]
# [2, 2, 1, 0]
# [2, 2, 2, 1]
# 4. Генераторы двумерных массивов
# Генераторы списков в Python можно использовать для эффективного создания двумерных массивов. Например, можно создать двумерный массив, в котором каждый элемент будет равен произведению индексов строки и столбца.

# Пример: Генератор двумерного массива
# python
# Копировать код
# n = 3
# matrix = [[i * j for j in range(n)] for i in range(n)]

# # Вывод результата
# for row in matrix:
#     print(row)
# Результат:

# csharp
# Копировать код
# [0, 0, 0]
# [0, 1, 2]
# [0, 2, 4]
# Здесь i * j генерирует элемент на пересечении строки i и столбца j.

# Пример работы с Tkinter для открытия и сохранения файлов
# В Tkinter можно создать интерфейс для открытия и сохранения файлов. Ниже приведен пример, как это можно реализовать с помощью кнопок.

# python
# Копировать код
# from tkinter import *
# from tkinter import filedialog as fd

# def insert_text():
#     file_name = fd.askopenfilename()  # Открытие диалога для выбора файла
#     with open(file_name) as f:
#         s = f.read()  # Чтение содержимого файла
#         text.insert(1.0, s)  # Вставка содержимого в текстовое поле

# def extract_text():
#     file_name = fd.asksaveasfilename(
#         filetypes=(("TXT files", "*.txt"),
#                    ("HTML files", "*.html;*.htm"),
#                    ("All files", "*.*"))
#     )  # Открытие диалога для сохранения файла
#     with open(file_name, 'w') as f:
#         s = text.get(1.0, END)  # Получение содержимого текстового поля
#         f.write(s)  # Запись содержимого в файл

# root = Tk()
# text = Text(width=50, height=25)
# text.grid(columnspan=2)

# b1 = Button(text="Открыть", command=insert_text)  # Кнопка для открытия файла
# b1.grid(row=1, column=0, sticky=E)

# b2 = Button(text="Сохранить", command=extract_text)  # Кнопка для сохранения файла
# b2.grid(row=1, column=1, sticky=W)

# root.mainloop()
# Заключение
# Вложенные списки (двумерные массивы) — это список, элементы которого могут быть списками, создавая тем самым таблицу.
# Для обработки двумерных массивов используются циклы, условия и генераторы.
# Tkinter предоставляет простой способ создания графических интерфейсов, которые можно использовать для работы с файлами и данными в приложениях.