# Тема 10: Цикл while
# Цикл while выполняет блок инструкций, пока заданное условие остаётся истинным. Это удобно для задач, где количество повторений заранее неизвестно.

# 1. Синтаксис цикла while
# python
# Копировать код
# while условие:
#     # Тело цикла
#     # Инструкции выполняются, пока условие истинно
# Условие проверяется до выполнения тела цикла.
# Если условие ложно на момент первой проверки, цикл не выполнится ни разу.
# Пример:

# python
# Копировать код
# i = 1
# while i <= 5:
#     print(i)
#     i += 1
# Результат:

# Копировать код
# 1
# 2
# 3
# 4
# 5
# 2. Инструкции управления циклом
# break
# Прерывает выполнение цикла, независимо от условия.

# Пример:

# python
# Копировать код
# i = 1
# while i <= 5:
#     if i == 3:
#         break
#     print(i)
#     i += 1
# Результат:

# Копировать код
# 1
# 2
# continue
# Пропускает текущую итерацию и переходит к следующей.

# Пример:

# python
# Копировать код
# i = 0
# while i < 5:
#     i += 1
#     if i == 3:
#         continue
#     print(i)
# Результат:

# Копировать код
# 1
# 2
# 4
# 5
# 3. Задачи
# Пример 21: Программа угадывания числа
# Описание задачи: Компьютер загадывает число от 1 до 100, пользователь должен угадать его. Программа сообщает, больше или меньше введённое число.

# Код программы:

# python
# Копировать код
# import random

# # Загаданное число
# a = random.randint(1, 100)
# print("Компьютер загадал число от 1 до 100. Попробуйте угадать!")

# # Ввод первого числа
# b = int(input("Введите ваше предположение: "))
# k = 1  # Счётчик попыток

# while b != a:
#     k += 1  # Увеличиваем счётчик попыток
#     if b > a:
#         b = int(input("Ваше число больше загаданного. Попробуйте снова: "))
#     else:
#         b = int(input("Ваше число меньше загаданного. Попробуйте снова: "))

# # Вывод результата
# print(f"Вы угадали число {a} с {k} попытки!")
# Результат работы:

# Копировать код
# Компьютер загадал число от 1 до 100. Попробуйте угадать!
# Введите ваше предположение: 50
# Ваше число меньше загаданного. Попробуйте снова: 75
# Ваше число больше загаданного. Попробуйте снова: 60
# Ваше число больше загаданного. Попробуйте снова: 55
# Вы угадали число 55 с 4 попытки!
# Пример 22: Проверка знаний таблицы умножения
# Описание задачи: Программа предлагает 5 случайных примеров умножения. Ученик вводит ответы, а программа считает количество правильных ответов.

# Код программы:

# python
# Копировать код
# from random import randint

# k = 0  # Количество правильных ответов
# n = 0  # Счётчик вопросов

# while n < 5:
#     # Генерация случайных чисел
#     a = randint(1, 10)
#     b = randint(1, 10)
    
#     # Вывод примера
#     print(f"{a} * {b} = ?")
    
#     # Ввод ответа
#     c = int(input("Ваш ответ: "))
    
#     # Проверка правильности
#     if c == a * b:
#         print("Правильно!")
#         k += 1
#     else:
#         print(f"Неправильно. Правильный ответ: {a * b}")
    
#     n += 1  # Увеличиваем счётчик вопросов

# # Итоговый результат
# print(f"Количество правильных ответов: {k} из 5.")
# Результат работы:

# Копировать код
# 3 * 4 = ?
# Ваш ответ: 12
# Правильно!
# 6 * 7 = ?
# Ваш ответ: 45
# Неправильно. Правильный ответ: 42
# 2 * 5 = ?
# Ваш ответ: 10
# Правильно!
# 9 * 9 = ?
# Ваш ответ: 80
# Неправильно. Правильный ответ: 81
# 1 * 1 = ?
# Ваш ответ: 1
# Правильно!
# Количество правильных ответов: 3 из 5.
# 4. Советы по работе с while
# Контролируйте условие цикла: Убедитесь, что оно может стать ложным, чтобы избежать бесконечного цикла.

# python
# Копировать код
# # Бесконечный цикл
# while True:
#     print("Этот цикл никогда не остановится!")
# Используйте break для выхода:

# python
# Копировать код
# while True:
#     response = input("Введите 'стоп', чтобы выйти: ")
#     if response.lower() == "стоп":
#         break
# Следите за изменением переменных цикла: Обновляйте переменные внутри цикла, чтобы избежать зацикливания.

# python
# Копировать код
# i = 1
# while i <= 10:
#     print(i)
#     i += 1
# Отладка: Если цикл работает неправильно, добавьте промежуточные выводы, чтобы отследить изменение переменных.

# Цикл while — мощный инструмент, особенно для задач с неизвестным количеством итераций, таких как игры, обработки данных или задачи с пользовательским вводом.