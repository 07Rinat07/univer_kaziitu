# Работа со строками в Python
# Строки в Python — это упорядоченные последовательности символов. Встроенные методы и функции позволяют легко манипулировать строками. Разберём основные возможности, включая функции строк, а также методы find, rfind, replace и count.

# 1. Основные функции для работы со строками
# 1.1. Чтение строки
# Функция input() используется для ввода строки с клавиатуры.

# s = input("Введите строку: ")
# print(f"Вы ввели: {s}")
# 1.2. Конкатенация строк
# Оператор + позволяет соединять строки.

# s1 = "Привет"
# s2 = "Мир"
# s3 = s1 + " " + s2
# print(s3)  # "Привет Мир"
# 1.3. Повторение строки
# Для повторения строки используется оператор *.
# s = "Привет"
# print(s * 3)  # "ПриветПриветПривет"
# 1.4. Длина строки
# Функция len() возвращает количество символов в строке.

# s = "Python"
# print(len(s))  # 6
# 1.5. Преобразование числа в строку
# Функция str() преобразует число в строку.

# num = 123
# str_num = str(num)
# print(str_num)  # '123'
# 2. Методы работы со строками
# 2.1. Метод find()
# Находит индекс первого вхождения подстроки (или символа) при поиске слева направо. Возвращает -1, если подстрока не найдена.

# Синтаксис:
# строка.find(подстрока[, начало[, конец]])
# Пример:
# s = "Программирование на Python"
# index = s.find("Python")
# print(index)  # 19
# 2.2. Метод rfind()
# Ищет подстроку справа налево. Возвращает индекс первого найденного символа (с конца строки) или -1, если подстрока не найдена.

# Пример:
# s = "Программирование на Python"
# index = s.rfind("а")
# print(index)  # 25
# 2.3. Метод replace()
# Заменяет одну подстроку на другую. Если указан параметр count, заменяет только указанное количество раз.

# Синтаксис:
# строка.replace(что, на_что[, count])
# Пример:


# s = "Привет, мир!"
# new_s = s.replace("мир", "Python")
# print(new_s)  # "Привет, Python!"
# 2.4. Метод count()
# Возвращает количество вхождений подстроки (или символа) в строке.

# Синтаксис:
# строка.count(подстрока[, начало[, конец]])
# Пример:


# s = "программа"
# count_a = s.count("а")
# print(count_a)  # 3
# 3. Примеры задач
# Пример 1: Подсчёт длины строки
# Ввод строки с клавиатуры и подсчёт её длины.


# s = input("Введите строку: ")
# print("Длина строки:", len(s))
# Пример 2: Замена подстроки
# Заменяем слово в строке на другое.


# s = "Программирование на Python"
# new_s = s.replace("Python", "Java")
# print(new_s)  # "Программирование на Java"
# Пример 3: Подсчёт вхождений символа
# Считаем количество букв "о" в строке.

# s = "программирование"
# count = s.count("о")
# print("Количество 'о':", count)  # 2
# Пример 4: Поиск индекса подстроки
# Находим индекс первого вхождения подстроки "Python".


# s = "Программирование на Python"
# index = s.find("Python")
# print("Индекс подстроки 'Python':", index)  # 19
# Пример 5: Поиск последнего вхождения символа
# Находим последний индекс буквы "а".

# s = "Программирование на Python"
# index = s.rfind("а")
# print("Последний индекс 'а':", index)  # 25
# 4. Практические советы
# Учитывайте регистр: Методы, такие как find, чувствительны к регистру.

# s = "Python"
# print(s.find("python"))  # -1
# Используйте параметры start и end: Для поиска в ограниченном диапазоне строки.
# s = "Программирование на Python"
# print(s.find("а", 10))  # 13
# Избегайте лишнего дублирования: Если метод возвращает -1, значит подстрока отсутствует. Не стоит проверять отдельно.
